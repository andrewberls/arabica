// Generated by CoffeeScript 1.3.3
(function() {
  var clc, compile, concatenate, config, files, fs;

  clc = require('cli-color');

  fs = require('fs');

  files = [];

  config = {};

  exports.build = function(dir) {
    var config_path, fileObj, path, _, _i, _len, _ref;
    _ = require('underscore');
    if (dir) {
      try {
        process.chdir(dir);
      } catch (err) {
        console.error(clc.red('Directory not found: ' + dir));
        process.exit(1);
      }
    }
    config_path = "" + (process.cwd()) + "/config.json";
    if (fs.existsSync(config_path)) {
      try {
        config = _.defaults(JSON.parse(fs.readFileSync(config_path, 'utf8')), {
          "out": "game.js",
          "uglify": true,
          "paths": []
        });
        if (fs.existsSync(config.out)) {
          fs.unlinkSync(config.out);
        }
        _ref = config.paths;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          if (!fs.existsSync(path)) {
            console.warn(clc.yellow("File " + path + " doesn't exist"));
            callback();
            return;
          }
          if (fs.statSync(path).isFile()) {
            fileObj = {
              path: path,
              language: path.substring(path.lastIndexOf('.') + 1),
              content: ''
            };
            fileObj.content = fs.readFileSync(path);
            files.push(fileObj);
          }
        }
        concatenate();
        compile();
        return console.log(clc.green("Successfully compiled to " + config.out));
      } catch (err) {
        console.error(clc.red('Something went wrong, please check your config.json syntax'));
        return process.exit(1);
      }
    } else {
      console.error(clc.red("No config.json file found in " + (process.cwd())));
      return process.exit(1);
    }
  };

  concatenate = function() {
    var file, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (file.language === "js") {
        _results.push(fs.appendFileSync(config.out, file.content));
      } else if (file.language === "coffee") {
        _results.push(fs.appendFileSync("__in.coffee", file.content));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  compile = function() {
    var coffee, src;
    coffee = require('coffee-script');
    src = coffee.compile(fs.readFileSync('__in.coffee').toString(), {
      bare: true
    });
    fs.appendFileSync(config.out, src);
    return fs.unlinkSync('__in.coffee');
  };

}).call(this);
