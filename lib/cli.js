// Generated by CoffeeScript 1.3.3
(function() {
  var async, clc, compile, concatAndUglify, config, files, fs, parseConfigPath, write;

  async = require('async');

  clc = require('cli-color');

  fs = require('fs');

  files = [];

  config = {};

  exports.build = function(dir) {
    var config_path, _;
    _ = require('underscore');
    if (dir) {
      try {
        process.chdir(dir);
      } catch (err) {
        console.error(clc.red('Directory not found: ' + dir));
        process.exit(1);
      }
    }
    config_path = "" + (process.cwd()) + "/config.json";
    if (fs.existsSync(config_path)) {
      try {
        config = _.defaults(JSON.parse(fs.readFileSync(config_path, 'utf8')), {
          "out": "game.js",
          "uglify": true,
          "paths": []
        });
        return async.forEachSeries(config.paths, parseConfigPath, function(err) {
          if (err) {
            throw err;
          }
          return compile();
        });
      } catch (err) {
        console.error(clc.red('Something went wrong, please check your config.json syntax'));
        return process.exit(1);
      }
    } else {
      console.error(clc.red("No config.json file found in " + (process.cwd())));
      return process.exit(1);
    }
  };

  parseConfigPath = function(path, callback) {
    return fs.exists(path, function(exists) {
      if (!exists) {
        console.warn(clc.yellow("File " + path + " doesn't exist"));
        callback();
        return;
      }
      return fs.stat(path, function(err, stats) {
        var fileObj;
        if (err) {
          throw err;
        }
        if (stats.isFile()) {
          fileObj = {
            path: path,
            language: path.substring(path.lastIndexOf('.') + 1)
          };
          return fs.readFile(path, 'utf8', function(err, content) {
            if (err) {
              callback(err);
            }
            fileObj.content = content;
            files.push(fileObj);
            return callback();
          });
        }
      });
    });
  };

  compile = function() {
    return async.forEach(files, function(file, callback) {
      var coffee;
      if (file.language !== 'coffee') {
        callback();
        return;
      }
      coffee = require('coffee-script');
      file.content = coffee.compile(file.content, {
        filename: file.path
      });
      return callback();
    }, function(err) {
      if (err) {
        console.error(clc.red("Converting " + err + " to JavaScript failed."));
        process.exit(1);
      }
      return concatAndUglify();
    });
  };

  concatAndUglify = function() {
    return async.reduce(files, '', function(memo, file, callback) {
      return callback(null, memo + file.content + '\n');
    }, function(err, combinedFiles) {
      var uglifiedFiles, uglify;
      if (err) {
        throw err;
      }
      if (config.uglify) {
        uglify = require('uglify-js');
        uglifiedFiles = uglify.minify(combinedFiles, {
          fromString: true
        }).code;
        return write(uglifiedFiles);
      } else {
        return write(combinedFiles);
      }
    });
  };

  write = function(content) {
    return fs.writeFile(config.out, content, 'utf8', function(err) {
      if (err) {
        console.error(clc.red('An error occurred writing the output file.'));
        process.exit(1);
      }
      return console.log(clc.green("Finished compiling to " + config.out));
    });
  };

}).call(this);
